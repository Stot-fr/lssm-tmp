//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = "postgresql://lssm:lssm@localhost:5433/lssm?schema=public"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "multiSchema", "postgresqlExtensions", "views", "relationJoins", "nativeDistinct", "omitApi", "prismaSchemaFolder", "typedSql", "strictUndefinedChecks"]
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum EventAttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
  UNKNOWN
}

enum ContactDetailType {
  PHONE
  EMAIL
  SOCIAL_INSTAGRAM
  SOCIAL_TWITTER
  SOCIAL_LINKEDIN
  SOCIAL_FACEBOOK
  SOCIAL_YOUTUBE
  SOCIAL_TIK
}

enum CommunityOpenLevel {
  PRIVATE
  ONLY_INVITE
  ON_REQUEST
  PUBLIC
}

model UserAccount {
  id                  String               @id() @default(uuid(7))
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt()
  deletedAt           DateTime?
  email               String               @unique()
  identities          AccountIdentity[]
  habits              Habit[]              @relation("UserHabits")
  events              Event[]              @relation("UserEvents")
  conversationMembers ConversationMember[]
  contacts            UserContact[]        @relation("UserContacts")
  contactGroups       UserContactGroup[]
  contactOfs          UserContact[]        @relation("ContactUser")
  communityMembers    CommunityMembers[]
  eventAttendees      EventAttendee[]
  userContactLabels   UserContactLabel[]
  blogs               Blog[]               @relation("UserBlogs")
  blogComments        BlogPostComment[]    @relation("UserBlogComments")

  @@index([deletedAt])
}

model ApiAccount {
  id        String    @id() @default(uuid(7))
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?
  apiKey    String    @unique()

  @@index([deletedAt])
}

model AccountIdentity {
  id            String                @id() @default(uuid(7))
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt()
  deletedAt     DateTime?
  userAccountId String?
  userAccount   UserAccount?          @relation(fields: [userAccountId], references: [id])
  organizations AccountOrganization[]

  @@index([deletedAt])
}

model AccountOrganization {
  id         String           @id() @default(uuid(7))
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt()
  deletedAt  DateTime?
  name       String
  identityId String?
  identity   AccountIdentity? @relation(fields: [identityId], references: [id])

  @@index([deletedAt])
}

model Blog {
  id        String            @id() @default(uuid(7))
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt()
  deletedAt DateTime?
  title     String
  content   String
  userId    String
  user      UserAccount       @relation("UserBlogs", fields: [userId], references: [id])
  posts     BlogPost[]
  comments  BlogPostComment[]

  @@index([deletedAt])
}

model BlogPost {
  id        String            @id() @default(uuid(7))
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt()
  deletedAt DateTime?
  title     String
  content   String
  blogId    String
  blog      Blog              @relation(fields: [blogId], references: [id])
  comments  BlogPostComment[]

  @@index([deletedAt])
}

model BlogPostComment {
  id         String      @id() @default(uuid(7))
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  deletedAt  DateTime?
  content    String
  blogId     String?
  blog       Blog?       @relation(fields: [blogId], references: [id])
  blogPostId String?
  blogPost   BlogPost?   @relation(fields: [blogPostId], references: [id])
  userId     String
  user       UserAccount @relation(name: "UserBlogComments", fields: [userId], references: [id])

  @@index([deletedAt])
}

model Event {
  id           String           @id() @default(uuid(7))
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt()
  deletedAt    DateTime?
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  location     String?
  userId       String
  user         UserAccount      @relation("UserEvents", fields: [userId], references: [id])
  attendees    EventAttendee[]
  recurrenceId String?          @unique()
  recurrence   EventRecurrence? @relation(fields: [recurrenceId], references: [id])
}

model EventAttendee {
  id        String              @id() @default(uuid(7))
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt()
  deletedAt DateTime?
  eventId   String
  event     Event               @relation(fields: [eventId], references: [id])
  userId    String
  user      UserAccount         @relation(fields: [userId], references: [id])
  status    EventAttendeeStatus @default(PENDING)

  @@unique([eventId, userId])
}

model EventRecurrence {
  id         String    @id() @default(uuid(7))
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
  deletedAt  DateTime?
  frequency  Frequency
  interval   Int
  startingAt DateTime  @default(now())
  endingAt   DateTime?
  event      Event[]
}

model Habit {
  id           String          @id() @default(uuid(7))
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt()
  deletedAt    DateTime?
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  location     String?
  userId       String
  user         UserAccount     @relation("UserHabits", fields: [userId], references: [id])
  recurrenceId String          @unique()
  recurrence   HabitRecurrence @relation(fields: [recurrenceId], references: [id])
}

model HabitRecurrence {
  id         String    @id() @default(uuid(7))
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
  deletedAt  DateTime?
  frequency  Frequency
  interval   Int
  startingAt DateTime  @default(now())
  endingAt   DateTime?
  Habit      Habit?
}

model ConversationMessage {
  id             String             @id() @default(uuid(7))
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt()
  deletedAt      DateTime?
  content        String
  conversationId String
  conversation   Conversation       @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         ConversationMember @relation(fields: [senderId], references: [id])

  @@index([deletedAt])
}

model Conversation {
  id        String                @id() @default(uuid(7))
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt()
  deletedAt DateTime?
  title     String?
  messages  ConversationMessage[]
  members   ConversationMember[]

  @@index([deletedAt])
}

model ConversationMember {
  id             String                @id() @default(uuid(7))
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt()
  deletedAt      DateTime?
  conversationId String
  conversation   Conversation          @relation(fields: [conversationId], references: [id])
  userAccountId  String
  userAccount    UserAccount           @relation(fields: [userAccountId], references: [id])
  messages       ConversationMessage[]

  @@unique([conversationId, userAccountId, deletedAt])
  @@index([deletedAt])
}

model UserContact {
  id                      String                    @id() @default(uuid(7))
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt()
  deletedAt               DateTime?
  name                    String?
  userAccountId           String?                   @unique()
  userAccount             UserAccount?              @relation("ContactUser", fields: [userAccountId], references: [id])
  ownerAccountId          String
  ownerAccount            UserAccount               @relation("UserContacts", fields: [ownerAccountId], references: [id])
  contactGroupMemberships UserContactGroupMembers[]
  contactDetails          ContactDetail[]
  labels                  UserContactLabel[]        @relation("ContactLabels")

  @@index([deletedAt])
}

model ContactDetail {
  id        String            @id() @default(uuid(7))
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt()
  deletedAt DateTime?
  type      ContactDetailType
  value     String
  label     String?
  contactId String
  contact   UserContact       @relation(fields: [contactId], references: [id])

  @@index([deletedAt])
}

model Community {
  id             String              @id() @default(uuid(7))
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt()
  deletedAt      DateTime?
  name           String
  isOpen         CommunityOpenLevel?
  parentId       String?
  parent         Community?          @relation("SubCommunities", fields: [parentId], references: [id])
  subCommunities Community[]         @relation("SubCommunities")
  members        CommunityMembers[]

  @@index([deletedAt])
}

model CommunityMembers {
  id          String      @id() @default(uuid(7))
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt()
  deletedAt   DateTime?
  communityId String
  community   Community   @relation(fields: [communityId], references: [id])
  userId      String
  user        UserAccount @relation(fields: [userId], references: [id])

  @@index([deletedAt])
}

model UserContactGroup {
  id            String                    @id() @default(uuid(7))
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt()
  deletedAt     DateTime?
  name          String
  description   String?
  userAccountId String
  userAccount   UserAccount               @relation(fields: [userAccountId], references: [id])
  members       UserContactGroupMembers[]

  @@index([deletedAt])
}

model UserContactGroupMembers {
  id        String           @id() @default(uuid(7))
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt()
  deletedAt DateTime?
  groupId   String
  group     UserContactGroup @relation(fields: [groupId], references: [id])
  contactId String
  contact   UserContact      @relation(fields: [contactId], references: [id])

  @@index([deletedAt])
}

model UserContactLabel {
  id        String        @id() @default(uuid(7))
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt()
  deletedAt DateTime?
  userId    String
  user      UserAccount   @relation(fields: [userId], references: [id])
  name      String
  color     String?
  members   UserContact[] @relation("ContactLabels")
}
