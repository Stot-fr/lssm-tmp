model Event {
  // Base field
  id        String    @id @default(uuid(7))
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Entity fields
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  location     String?
  userId       String
  user         UserAccount      @relation("UserEvents", fields: [userId], references: [id])
  attendees    EventAttendee[]
  recurrenceId String?          @unique
  recurrence   EventRecurrence? @relation(fields: [recurrenceId], references: [id])
}

enum EventAttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
  UNKNOWN
}

model EventAttendee {
  // Base field
  id        String    @id @default(uuid(7))
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Entity fields
  eventId String
  event   Event               @relation(fields: [eventId], references: [id])
  userId  String
  user    UserAccount         @relation(fields: [userId], references: [id])
  status  EventAttendeeStatus @default(PENDING)

  @@unique([eventId, userId]) // Ensure unique attendee per event
}

model EventRecurrence {
  id         String    @id @default(uuid(7))
  frequency  Frequency
  interval   Int
  startingAt DateTime  @default(now())
  endingAt   DateTime?
  event      Event[]
}
