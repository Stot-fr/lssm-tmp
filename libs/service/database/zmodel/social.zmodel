import "utils"
import "account"
import "blog"
import "event"
import "habit"
import "messaging"
import "social"

model UserContact  extends Entity{

  name                    String?
  userAccountId           String?                   @unique
  userAccount             UserAccount?              @relation("ContactUser", fields: [userAccountId], references: [id])
  ownerAccountId          String
  ownerAccount            UserAccount               @relation("UserContacts", fields: [ownerAccountId], references: [id])
  contactGroupMemberships UserContactGroupMembers[]
  contactDetails          ContactDetail[]
  labels                  UserContactLabel[]        @relation("ContactLabels")

  @@index([deletedAt])
}

enum ContactDetailType {
  PHONE
  EMAIL
  SOCIAL_INSTAGRAM
  SOCIAL_TWITTER
  SOCIAL_LINKEDIN
  SOCIAL_FACEBOOK
  SOCIAL_YOUTUBE
  SOCIAL_TIK
}

model ContactDetail   extends Entity{

  type      ContactDetailType
  value     String
  label     String? // e.g., 'work', 'personal', etc.
  contactId String
  contact   UserContact       @relation(fields: [contactId], references: [id])

  @@index([deletedAt])
}

enum CommunityOpenLevel {
  PRIVATE
  ONLY_INVITE
  ON_REQUEST
  PUBLIC
}

model Community   extends Entity{

  name           String
  isOpen         CommunityOpenLevel?
  parentId       String?
  parent         Community?          @relation("SubCommunities", fields: [parentId], references: [id])
  subCommunities Community[]         @relation("SubCommunities")
  members        CommunityMembers[]

  @@index([deletedAt])
}

model CommunityMembers   extends Entity{

  communityId String
  community   Community   @relation(fields: [communityId], references: [id])
  userId      String
  user        UserAccount @relation(fields: [userId], references: [id])

  @@index([deletedAt])
}

model UserContactGroup   extends Entity{

  name          String
  description   String?
  userAccountId String
  userAccount   UserAccount               @relation(fields: [userAccountId], references: [id])
  members       UserContactGroupMembers[]

  @@index([deletedAt])
}

model UserContactGroupMembers   extends Entity{

  groupId   String
  group     UserContactGroup @relation(fields: [groupId], references: [id])
  contactId String
  contact   UserContact      @relation(fields: [contactId], references: [id])

  @@index([deletedAt])
}

model UserContactLabel   extends Entity{

  userId    String
  user      UserAccount   @relation(fields: [userId], references: [id])
  name      String
  color     String?
  members   UserContact[] @relation("ContactLabels")
}
